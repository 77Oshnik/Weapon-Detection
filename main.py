#!/usr/bin/env python3\n\"\"\"Main entry point for weapon detection system.\"\"\"\n\nimport argparse\nimport sys\nfrom pathlib import Path\n\n# Add src to path for development\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom weapon_detection.cli import train_command, detect_command, merge_command, download_command\n\n\ndef main():\n    \"\"\"Main entry point with subcommands.\"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Weapon Detection System for Security Applications\",\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        epilog=\"\"\"\nExamples:\n  # Train a model\n  python main.py train --data dataset/unified_weapon_dataset/data.yaml --epochs 50\n  \n  # Detect weapons in video\n  python main.py detect --model weights/best.pt --source video.mp4 --show\n  \n  # Merge datasets\n  python main.py merge --config config/merge_config.yaml --output dataset/unified\n  \n  # Download no-weapon dataset\n  python main.py download --output dataset/no_weapon_coco --max-images 800\n\"\"\"\n    )\n    \n    subparsers = parser.add_subparsers(dest='command', help='Available commands')\n    \n    # Train command\n    train_parser = subparsers.add_parser('train', help='Train weapon detection model')\n    train_command.add_args(train_parser)\n    \n    # Detect command\n    detect_parser = subparsers.add_parser('detect', help='Detect weapons in video/images')\n    detect_command.add_args(detect_parser)\n    \n    # Merge command\n    merge_parser = subparsers.add_parser('merge', help='Merge multiple datasets')\n    merge_command.add_args(merge_parser)\n    \n    # Download command\n    download_parser = subparsers.add_parser('download', help='Download no-weapon dataset')\n    download_command.add_args(download_parser)\n    \n    args = parser.parse_args()\n    \n    if not args.command:\n        parser.print_help()\n        return 1\n    \n    # Execute command\n    if args.command == 'train':\n        return train_command.main(args)\n    elif args.command == 'detect':\n        return detect_command.main(args)\n    elif args.command == 'merge':\n        return merge_command.main(args)\n    elif args.command == 'download':\n        return download_command.main(args)\n    else:\n        parser.print_help()\n        return 1\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())